var o=Object.defineProperty;var _=(t,E,s)=>E in t?o(t,E,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[E]=s;var C=(t,E,s)=>_(t,typeof E!="symbol"?E+"":E,s);import{bj as I,bk as a,E as D}from"./vendor-3y-Tr9ie.js";import{r as A}from"./index-Cpc2chc0.js";const e=class e{static success(E=null,s=this.MESSAGE[this.CODE.SUCCESS],r=this.CODE.SUCCESS){return{code:r,message:s,data:E,success:!0,timestamp:new Date().getTime()}}static error(E=this.MESSAGE[this.CODE.FAIL],s=this.CODE.FAIL,r=null){return{code:s,message:E,data:r,success:!1,timestamp:new Date().getTime()}}static paramError(E=this.MESSAGE[this.CODE.PARAM_ERROR]){return this.error(E,this.CODE.PARAM_ERROR)}static serviceError(E=this.MESSAGE[this.CODE.SERVICE_ERROR]){return this.error(E,this.CODE.SERVICE_ERROR)}static unauthorized(E=this.MESSAGE[this.CODE.ADMIN_LOGIN_AUTH]){return this.error(E,this.CODE.ADMIN_LOGIN_AUTH)}static forbidden(E=this.MESSAGE[this.CODE.ADMIN_ACCESS_FORBIDDEN]){return this.error(E,this.CODE.ADMIN_ACCESS_FORBIDDEN)}static tokenExpired(E=this.MESSAGE[this.CODE.TOKEN_EXPIRED]){return this.error(E,this.CODE.TOKEN_EXPIRED)}static tokenInvalid(E=this.MESSAGE[this.CODE.TOKEN_INVALID]){return this.error(E,this.CODE.TOKEN_INVALID)}static getMessageByCode(E){return this.MESSAGE[E]||"未知错误"}};C(e,"CODE",{SUCCESS:200,FAIL:201,PARAM_ERROR:202,SERVICE_ERROR:203,DATA_ERROR:204,ILLEGAL_REQUEST:205,REPEAT_SUBMIT:206,DELETE_ERROR:207,ADMIN_ACCOUNT_EXIST_ERROR:301,ADMIN_CAPTCHA_CODE_ERROR:302,ADMIN_CAPTCHA_CODE_EXPIRED:303,ADMIN_CAPTCHA_CODE_NOT_FOUND:304,ADMIN_LOGIN_AUTH:305,ADMIN_ACCOUNT_NOT_EXIST_ERROR:306,ADMIN_ACCOUNT_ERROR:307,ADMIN_ACCOUNT_DISABLED_ERROR:308,ADMIN_ACCESS_FORBIDDEN:309,APP_LOGIN_AUTH:501,APP_LOGIN_PHONE_EMPTY:502,APP_LOGIN_CODE_EMPTY:503,APP_SEND_SMS_TOO_OFTEN:504,APP_LOGIN_CODE_EXPIRED:505,APP_LOGIN_CODE_ERROR:506,APP_ACCOUNT_DISABLED_ERROR:507,TOKEN_EXPIRED:601,TOKEN_INVALID:602}),C(e,"MESSAGE",{[e.CODE.SUCCESS]:"成功",[e.CODE.FAIL]:"失败",[e.CODE.PARAM_ERROR]:"参数不正确",[e.CODE.SERVICE_ERROR]:"服务异常",[e.CODE.DATA_ERROR]:"数据异常",[e.CODE.ILLEGAL_REQUEST]:"非法请求",[e.CODE.REPEAT_SUBMIT]:"重复提交",[e.CODE.DELETE_ERROR]:"请先删除子集",[e.CODE.ADMIN_ACCOUNT_EXIST_ERROR]:"账号已存在",[e.CODE.ADMIN_CAPTCHA_CODE_ERROR]:"验证码错误",[e.CODE.ADMIN_CAPTCHA_CODE_EXPIRED]:"验证码已过期",[e.CODE.ADMIN_CAPTCHA_CODE_NOT_FOUND]:"未输入验证码",[e.CODE.ADMIN_LOGIN_AUTH]:"未登录",[e.CODE.ADMIN_ACCOUNT_NOT_EXIST_ERROR]:"账号不存在",[e.CODE.ADMIN_ACCOUNT_ERROR]:"用户名或密码错误",[e.CODE.ADMIN_ACCOUNT_DISABLED_ERROR]:"该用户已被禁用",[e.CODE.ADMIN_ACCESS_FORBIDDEN]:"无访问权限",[e.CODE.APP_LOGIN_AUTH]:"未登录",[e.CODE.APP_LOGIN_PHONE_EMPTY]:"手机号码为空",[e.CODE.APP_LOGIN_CODE_EMPTY]:"验证码为空",[e.CODE.APP_SEND_SMS_TOO_OFTEN]:"验证码发送过于频繁",[e.CODE.APP_LOGIN_CODE_EXPIRED]:"验证码已过期",[e.CODE.APP_LOGIN_CODE_ERROR]:"验证码错误",[e.CODE.APP_ACCOUNT_DISABLED_ERROR]:"该用户已被禁用",[e.CODE.TOKEN_EXPIRED]:"token过期",[e.CODE.TOKEN_INVALID]:"token非法"});let O=e;const N=I("user",{state:()=>({token:localStorage.getItem("token")||"",userInfo:JSON.parse(localStorage.getItem("userInfo"))||null}),actions:{setToken(t){this.token=t,localStorage.setItem("token",t)},setUserInfo(t){this.userInfo=t,localStorage.setItem("userInfo",JSON.stringify(t))},clearUserInfo(){this.token="",this.userInfo=null,localStorage.removeItem("token"),localStorage.removeItem("userInfo")}}}),i=a.create({baseURL:void 0,timeout:15e3,withCredentials:!1,headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Origin, Content-Type, Accept, Authorization"}});i.interceptors.request.use(t=>{const E=N();if(E.token&&(t.headers.Authorization=`Bearer ${E.token}`),t.method==="post"||t.method==="put"){const s={...t.data};Object.keys(s).forEach(r=>{(s[r]===null||s[r]===void 0||s[r]==="")&&delete s[r]}),t.data=s}return t},t=>Promise.reject(t));i.interceptors.response.use(t=>{const E=t.data;if(E.code===O.CODE.SUCCESS)return E;switch(E.code){case O.CODE.TOKEN_EXPIRED:case O.CODE.TOKEN_INVALID:A.push("/login");break;case O.CODE.ADMIN_LOGIN_AUTH:case O.CODE.APP_LOGIN_AUTH:A.push("/login");break;default:D.error(E.message||"操作失败")}return Promise.reject(E)},t=>{var E;if(console.error("请求错误详情:",(E=t.response)==null?void 0:E.data),console.error("完整错误信息:",t),t.response){const s=t.response.data;switch(t.response.status){case 400:D.error("请求参数错误: "+(s.message||s.error||""));break;case 500:D.error("服务器错误: "+(s.message||s.error||"内部错误")),console.error("详细错误:",s);break;default:D.error(s.message||s.error||"请求失败")}}else t.request?D.error("网络连接失败，请检查网络设置"):D.error("请求配置错误");return Promise.reject(t)});
